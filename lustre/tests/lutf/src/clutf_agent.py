# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _clutf_agent
else:
    import _clutf_agent

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


RESET = _clutf_agent.RESET
BLACK = _clutf_agent.BLACK
RED = _clutf_agent.RED
GREEN = _clutf_agent.GREEN
YELLOW = _clutf_agent.YELLOW
BLUE = _clutf_agent.BLUE
MAGENTA = _clutf_agent.MAGENTA
CYAN = _clutf_agent.CYAN
WHITE = _clutf_agent.WHITE
BOLDBLACK = _clutf_agent.BOLDBLACK
BOLDRED = _clutf_agent.BOLDRED
BOLDGREEN = _clutf_agent.BOLDGREEN
BOLDYELLOW = _clutf_agent.BOLDYELLOW
BOLDBLUE = _clutf_agent.BOLDBLUE
BOLDMAGENTA = _clutf_agent.BOLDMAGENTA
BOLDCYAN = _clutf_agent.BOLDCYAN
BOLDWHITE = _clutf_agent.BOLDWHITE
LUTF_VERSION_NUMBER = _clutf_agent.LUTF_VERSION_NUMBER
MAX_STR_LEN = _clutf_agent.MAX_STR_LEN
MAX_MSG_SIZE = _clutf_agent.MAX_MSG_SIZE
LUTF_EXIT_NORMAL = _clutf_agent.LUTF_EXIT_NORMAL
LUTF_EXIT_ERR_STARTUP = _clutf_agent.LUTF_EXIT_ERR_STARTUP
LUTF_EXIT_ERR_BAD_PARAM = _clutf_agent.LUTF_EXIT_ERR_BAD_PARAM
LUTF_EXIT_ERR_THREAD_STARTUP = _clutf_agent.LUTF_EXIT_ERR_THREAD_STARTUP
LUTF_EXIT_ERR_DEAMEON_STARTUP = _clutf_agent.LUTF_EXIT_ERR_DEAMEON_STARTUP
SYSTEMIPADDR = _clutf_agent.SYSTEMIPADDR
INVALID_TCP_SOCKET = _clutf_agent.INVALID_TCP_SOCKET
SOCKET_TIMEOUT_USEC = _clutf_agent.SOCKET_TIMEOUT_USEC
SOCKET_CONN_TIMEOUT_SEC = _clutf_agent.SOCKET_CONN_TIMEOUT_SEC
TCP_READ_TIMEOUT_SEC = _clutf_agent.TCP_READ_TIMEOUT_SEC
TEST_ROLE_GRC = _clutf_agent.TEST_ROLE_GRC
TEST_ROLE_MGS = _clutf_agent.TEST_ROLE_MGS
TEST_ROLE_MDT = _clutf_agent.TEST_ROLE_MDT
TEST_ROLE_OSS = _clutf_agent.TEST_ROLE_OSS
TEST_ROLE_OST = _clutf_agent.TEST_ROLE_OST
TEST_ROLE_RTR = _clutf_agent.TEST_ROLE_RTR
TEST_ROLE_CLI = _clutf_agent.TEST_ROLE_CLI
DEFAULT_MASTER_PORT = _clutf_agent.DEFAULT_MASTER_PORT
EN_LUTF_RC_OK = _clutf_agent.EN_LUTF_RC_OK
EN_LUTF_RC_FAIL = _clutf_agent.EN_LUTF_RC_FAIL
EN_LUTF_RC_SYS_ERR = _clutf_agent.EN_LUTF_RC_SYS_ERR
EN_LUTF_RC_BAD_VERSION = _clutf_agent.EN_LUTF_RC_BAD_VERSION
EN_LUTF_RC_SOCKET_FAIL = _clutf_agent.EN_LUTF_RC_SOCKET_FAIL
EN_LUTF_RC_BIND_FAILED = _clutf_agent.EN_LUTF_RC_BIND_FAILED
EN_LUTF_RC_LISTEN_FAILED = _clutf_agent.EN_LUTF_RC_LISTEN_FAILED
EN_LUTF_RC_CLIENT_CLOSED = _clutf_agent.EN_LUTF_RC_CLIENT_CLOSED
EN_LUTF_RC_ERR_THREAD_STARTUP = _clutf_agent.EN_LUTF_RC_ERR_THREAD_STARTUP
EN_LUTF_RC_AGENT_NOT_FOUND = _clutf_agent.EN_LUTF_RC_AGENT_NOT_FOUND
EN_LUTF_RC_PY_IMPORT_FAIL = _clutf_agent.EN_LUTF_RC_PY_IMPORT_FAIL
EN_LUTF_RC_PY_SCRIPT_FAIL = _clutf_agent.EN_LUTF_RC_PY_SCRIPT_FAIL
EN_LUTF_RC_RPC_FAIL = _clutf_agent.EN_LUTF_RC_RPC_FAIL
EN_LUTF_RC_OOM = _clutf_agent.EN_LUTF_RC_OOM
EN_LUTF_RC_BAD_PARAM = _clutf_agent.EN_LUTF_RC_BAD_PARAM
EN_LUTF_RC_BAD_ADDR = _clutf_agent.EN_LUTF_RC_BAD_ADDR
EN_LUTF_RC_MISSING_PARAM = _clutf_agent.EN_LUTF_RC_MISSING_PARAM
EN_LUTF_RC_TIMEOUT = _clutf_agent.EN_LUTF_RC_TIMEOUT
EN_LUTF_RC_MAX = _clutf_agent.EN_LUTF_RC_MAX
EN_LUTF_MASTER = _clutf_agent.EN_LUTF_MASTER
EN_LUTF_AGENT = _clutf_agent.EN_LUTF_AGENT
EN_LUTF_INVALID = _clutf_agent.EN_LUTF_INVALID
INTERACTIVE = _clutf_agent.INTERACTIVE
BATCH = _clutf_agent.BATCH
DAEMON = _clutf_agent.DAEMON
EN_LUTF_RUN_INTERACTIVE = _clutf_agent.EN_LUTF_RUN_INTERACTIVE
EN_LUTF_RUN_BATCH = _clutf_agent.EN_LUTF_RUN_BATCH
EN_LUTF_RUN_DAEMON = _clutf_agent.EN_LUTF_RUN_DAEMON
EN_LUTF_RUN_INVALID = _clutf_agent.EN_LUTF_RUN_INVALID
MAX_NUM_AGENTS = _clutf_agent.MAX_NUM_AGENTS
HB_TO = _clutf_agent.HB_TO
LUTF_AGENT_STATE_ALIVE = _clutf_agent.LUTF_AGENT_STATE_ALIVE
LUTF_AGENT_HB_CHANNEL_CONNECTED = _clutf_agent.LUTF_AGENT_HB_CHANNEL_CONNECTED
LUTF_AGENT_RPC_CHANNEL_CONNECTED = _clutf_agent.LUTF_AGENT_RPC_CHANNEL_CONNECTED
LUTF_AGENT_WORK_IN_PROGRESS = _clutf_agent.LUTF_AGENT_WORK_IN_PROGRESS
LUTF_AGENT_NEED_LISTEN_CLEAN = _clutf_agent.LUTF_AGENT_NEED_LISTEN_CLEAN
LUTF_AGENT_STATE_DEAD = _clutf_agent.LUTF_AGENT_STATE_DEAD
class lutf_agent_blk_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mutex = property(_clutf_agent.lutf_agent_blk_t_mutex_get, _clutf_agent.lutf_agent_blk_t_mutex_set)
    id = property(_clutf_agent.lutf_agent_blk_t_id_get, _clutf_agent.lutf_agent_blk_t_id_set)
    version = property(_clutf_agent.lutf_agent_blk_t_version_get, _clutf_agent.lutf_agent_blk_t_version_set)
    telnet_port = property(_clutf_agent.lutf_agent_blk_t_telnet_port_get, _clutf_agent.lutf_agent_blk_t_telnet_port_set)
    listen_port = property(_clutf_agent.lutf_agent_blk_t_listen_port_get, _clutf_agent.lutf_agent_blk_t_listen_port_set)
    name = property(_clutf_agent.lutf_agent_blk_t_name_get, _clutf_agent.lutf_agent_blk_t_name_set)
    hostname = property(_clutf_agent.lutf_agent_blk_t_hostname_get, _clutf_agent.lutf_agent_blk_t_hostname_set)
    iFileDesc = property(_clutf_agent.lutf_agent_blk_t_iFileDesc_get, _clutf_agent.lutf_agent_blk_t_iFileDesc_set)
    iRpcFd = property(_clutf_agent.lutf_agent_blk_t_iRpcFd_get, _clutf_agent.lutf_agent_blk_t_iRpcFd_set)
    time_stamp = property(_clutf_agent.lutf_agent_blk_t_time_stamp_get, _clutf_agent.lutf_agent_blk_t_time_stamp_set)
    addr = property(_clutf_agent.lutf_agent_blk_t_addr_get, _clutf_agent.lutf_agent_blk_t_addr_set)
    state = property(_clutf_agent.lutf_agent_blk_t_state_get, _clutf_agent.lutf_agent_blk_t_state_set)
    ref_count = property(_clutf_agent.lutf_agent_blk_t_ref_count_get, _clutf_agent.lutf_agent_blk_t_ref_count_set)
    node_type = property(_clutf_agent.lutf_agent_blk_t_node_type_get, _clutf_agent.lutf_agent_blk_t_node_type_set)

    def __init__(self):
        _clutf_agent.lutf_agent_blk_t_swiginit(self, _clutf_agent.new_lutf_agent_blk_t())
    __swig_destroy__ = _clutf_agent.delete_lutf_agent_blk_t

# Register lutf_agent_blk_t in _clutf_agent:
_clutf_agent.lutf_agent_blk_t_swigregister(lutf_agent_blk_t)


def lutf_agent_get_highest_fd():
    return _clutf_agent.lutf_agent_get_highest_fd()

def agent_state2str(agent):
    return _clutf_agent.agent_state2str(agent)

def get_local_ip():
    return _clutf_agent.get_local_ip()

def get_next_active_agent(idx, out):
    return _clutf_agent.get_next_active_agent(idx, out)

def find_agent_blk_by_id(idx):
    return _clutf_agent.find_agent_blk_by_id(idx)

def find_agent_blk_by_ip(ip):
    return _clutf_agent.find_agent_blk_by_ip(ip)

def find_agent_blk_by_name(name):
    return _clutf_agent.find_agent_blk_by_name(name)

def find_create_agent_blk_by_addr(addr):
    return _clutf_agent.find_create_agent_blk_by_addr(addr)

def find_free_agent_blk(addr):
    return _clutf_agent.find_free_agent_blk(addr)

def acquire_agent_blk(agent):
    return _clutf_agent.acquire_agent_blk(agent)

def release_agent_blk(agent, dead):
    return _clutf_agent.release_agent_blk(agent, dead)

def agent_ip2str(agent):
    return _clutf_agent.agent_ip2str(agent)

def agent_disable_hb():
    return _clutf_agent.agent_disable_hb()

def agent_enable_hb():
    return _clutf_agent.agent_enable_hb()

def agent_get_hb():
    return _clutf_agent.agent_get_hb()

def get_num_agents():
    return _clutf_agent.get_num_agents()

def get_num_agents_remote(masterIP, masterPort):
    return _clutf_agent.get_num_agents_remote(masterIP, masterPort)

def wait_for_agents(agents, timeout):
    return _clutf_agent.wait_for_agents(agents, timeout)

def set_agent_state(agent, state):
    return _clutf_agent.set_agent_state(agent, state)

def unset_agent_state(agent, state):
    return _clutf_agent.unset_agent_state(agent, state)

def lutf_send_rpc(agent, yaml, timeout):
    return _clutf_agent.lutf_send_rpc(agent, yaml, timeout)

def lutf_send_rpc_rsp(agent, yaml):
    return _clutf_agent.lutf_send_rpc_rsp(agent, yaml)

def agent_init():
    return _clutf_agent.agent_init()


