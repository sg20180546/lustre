# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _clutf_global
else:
    import _clutf_global

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


RESET = _clutf_global.RESET
BLACK = _clutf_global.BLACK
RED = _clutf_global.RED
GREEN = _clutf_global.GREEN
YELLOW = _clutf_global.YELLOW
BLUE = _clutf_global.BLUE
MAGENTA = _clutf_global.MAGENTA
CYAN = _clutf_global.CYAN
WHITE = _clutf_global.WHITE
BOLDBLACK = _clutf_global.BOLDBLACK
BOLDRED = _clutf_global.BOLDRED
BOLDGREEN = _clutf_global.BOLDGREEN
BOLDYELLOW = _clutf_global.BOLDYELLOW
BOLDBLUE = _clutf_global.BOLDBLUE
BOLDMAGENTA = _clutf_global.BOLDMAGENTA
BOLDCYAN = _clutf_global.BOLDCYAN
BOLDWHITE = _clutf_global.BOLDWHITE
LUTF_VERSION_NUMBER = _clutf_global.LUTF_VERSION_NUMBER
MAX_STR_LEN = _clutf_global.MAX_STR_LEN
MAX_MSG_SIZE = _clutf_global.MAX_MSG_SIZE
LUTF_EXIT_NORMAL = _clutf_global.LUTF_EXIT_NORMAL
LUTF_EXIT_ERR_STARTUP = _clutf_global.LUTF_EXIT_ERR_STARTUP
LUTF_EXIT_ERR_BAD_PARAM = _clutf_global.LUTF_EXIT_ERR_BAD_PARAM
LUTF_EXIT_ERR_THREAD_STARTUP = _clutf_global.LUTF_EXIT_ERR_THREAD_STARTUP
LUTF_EXIT_ERR_DEAMEON_STARTUP = _clutf_global.LUTF_EXIT_ERR_DEAMEON_STARTUP
SYSTEMIPADDR = _clutf_global.SYSTEMIPADDR
INVALID_TCP_SOCKET = _clutf_global.INVALID_TCP_SOCKET
SOCKET_TIMEOUT_USEC = _clutf_global.SOCKET_TIMEOUT_USEC
SOCKET_CONN_TIMEOUT_SEC = _clutf_global.SOCKET_CONN_TIMEOUT_SEC
TCP_READ_TIMEOUT_SEC = _clutf_global.TCP_READ_TIMEOUT_SEC
TEST_ROLE_GRC = _clutf_global.TEST_ROLE_GRC
TEST_ROLE_MGS = _clutf_global.TEST_ROLE_MGS
TEST_ROLE_MDT = _clutf_global.TEST_ROLE_MDT
TEST_ROLE_OSS = _clutf_global.TEST_ROLE_OSS
TEST_ROLE_OST = _clutf_global.TEST_ROLE_OST
TEST_ROLE_RTR = _clutf_global.TEST_ROLE_RTR
TEST_ROLE_CLI = _clutf_global.TEST_ROLE_CLI
DEFAULT_MASTER_PORT = _clutf_global.DEFAULT_MASTER_PORT
EN_LUTF_RC_OK = _clutf_global.EN_LUTF_RC_OK
EN_LUTF_RC_FAIL = _clutf_global.EN_LUTF_RC_FAIL
EN_LUTF_RC_SYS_ERR = _clutf_global.EN_LUTF_RC_SYS_ERR
EN_LUTF_RC_BAD_VERSION = _clutf_global.EN_LUTF_RC_BAD_VERSION
EN_LUTF_RC_SOCKET_FAIL = _clutf_global.EN_LUTF_RC_SOCKET_FAIL
EN_LUTF_RC_BIND_FAILED = _clutf_global.EN_LUTF_RC_BIND_FAILED
EN_LUTF_RC_LISTEN_FAILED = _clutf_global.EN_LUTF_RC_LISTEN_FAILED
EN_LUTF_RC_CLIENT_CLOSED = _clutf_global.EN_LUTF_RC_CLIENT_CLOSED
EN_LUTF_RC_ERR_THREAD_STARTUP = _clutf_global.EN_LUTF_RC_ERR_THREAD_STARTUP
EN_LUTF_RC_AGENT_NOT_FOUND = _clutf_global.EN_LUTF_RC_AGENT_NOT_FOUND
EN_LUTF_RC_PY_IMPORT_FAIL = _clutf_global.EN_LUTF_RC_PY_IMPORT_FAIL
EN_LUTF_RC_PY_SCRIPT_FAIL = _clutf_global.EN_LUTF_RC_PY_SCRIPT_FAIL
EN_LUTF_RC_RPC_FAIL = _clutf_global.EN_LUTF_RC_RPC_FAIL
EN_LUTF_RC_OOM = _clutf_global.EN_LUTF_RC_OOM
EN_LUTF_RC_BAD_PARAM = _clutf_global.EN_LUTF_RC_BAD_PARAM
EN_LUTF_RC_BAD_ADDR = _clutf_global.EN_LUTF_RC_BAD_ADDR
EN_LUTF_RC_MISSING_PARAM = _clutf_global.EN_LUTF_RC_MISSING_PARAM
EN_LUTF_RC_TIMEOUT = _clutf_global.EN_LUTF_RC_TIMEOUT
EN_LUTF_RC_MAX = _clutf_global.EN_LUTF_RC_MAX
EN_LUTF_MASTER = _clutf_global.EN_LUTF_MASTER
EN_LUTF_AGENT = _clutf_global.EN_LUTF_AGENT
EN_LUTF_INVALID = _clutf_global.EN_LUTF_INVALID
INTERACTIVE = _clutf_global.INTERACTIVE
BATCH = _clutf_global.BATCH
DAEMON = _clutf_global.DAEMON
EN_LUTF_RUN_INTERACTIVE = _clutf_global.EN_LUTF_RUN_INTERACTIVE
EN_LUTF_RUN_BATCH = _clutf_global.EN_LUTF_RUN_BATCH
EN_LUTF_RUN_DAEMON = _clutf_global.EN_LUTF_RUN_DAEMON
EN_LUTF_RUN_INVALID = _clutf_global.EN_LUTF_RUN_INVALID

def get_lutf_path():
    return _clutf_global.get_lutf_path()

def get_py_path():
    return _clutf_global.get_py_path()

def get_master_name():
    return _clutf_global.get_master_name()

def get_suite_name():
    return _clutf_global.get_suite_name()

def get_script_name():
    return _clutf_global.get_script_name()

def get_matching_pattern():
    return _clutf_global.get_matching_pattern()

def get_master_listen_port():
    return _clutf_global.get_master_listen_port()

def get_node_name():
    return _clutf_global.get_node_name()

def get_agent_telnet_port():
    return _clutf_global.get_agent_telnet_port()

def get_master_address():
    return _clutf_global.get_master_address()

def get_master_port():
    return _clutf_global.get_master_port()

def get_lutf_mode():
    return _clutf_global.get_lutf_mode()

def get_lutf_type():
    return _clutf_global.get_lutf_type()

def get_lutf_results_file_path():
    return _clutf_global.get_lutf_results_file_path()

def get_lutf_cfg_file_path():
    return _clutf_global.get_lutf_cfg_file_path()

def get_lutf_tmp_dir():
    return _clutf_global.get_lutf_tmp_dir()


